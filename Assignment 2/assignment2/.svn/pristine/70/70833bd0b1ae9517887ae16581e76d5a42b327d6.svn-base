#include <iostream>
#include <sstream>
#include <string>
#include <cstring>
#include <vector>
using namespace std;

// AVL Node structure
struct Node {
    int key;
    Node* left;
    Node* right;
    int height;
};

// Function to get the height of a node
int getHeight(Node* node) {
    if (node == nullptr)
        return 0;
    return node->height;
}

// Function to calculate the balance factor of a node
int getBalanceFactor(Node* node) {
    if (node == nullptr)
        return 0;
    return getHeight(node->left) - getHeight(node->right);
}

// Function to update the height of a node
void updateHeight(Node* node) {
    if (node == nullptr)
        return;
    node->height = 1 + max(getHeight(node->left), getHeight(node->right));
}

// Function to perform a right rotation
Node* rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    updateHeight(y);
    updateHeight(x);

    return x;
}

// Function to perform a left rotation
Node* leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    updateHeight(x);
    updateHeight(y);

    return y;
}

// Function to insert a key into the AVL tree
Node* insert(Node* root, int key) {
    if (root == nullptr)
        return new Node{key, nullptr, nullptr, 1};

    if (key < root->key)
        root->left = insert(root->left, key);
    else if (key > root->key)
        root->right = insert(root->right, key);
    else
        return root; // Duplicate keys are not allowed

    // Update height and balance factor of the current node
    updateHeight(root);

    // Check if the node became unbalanced
    int balance = getBalanceFactor(root);

    // Left Heavy (LL or LR)
    if (balance > 1) {
        if (key < root->left->key) {
            return rightRotate(root); // LL
        } else {
            root->left = leftRotate(root->left);
            return rightRotate(root); // LR
        }
    }

    // Right Heavy (RR or RL)
    if (balance < -1) {
        if (key > root->right->key) {
            return leftRotate(root); // RR
        } else {
            root->right = rightRotate(root->right);
            return leftRotate(root); // RL
        }
    }

    return root;
}

// Function to find the minimum value node in an AVL tree
Node* findMinValueNode(Node* root) {
    Node* current = root;
    while (current->left != nullptr)
        current = current->left;
    return current;
}

// Function to delete a key from the AVL tree
Node* deleteNode(Node* root, int key) {
    if (root == nullptr)
        return root;

    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        // Node with only one child or no child
        if (root->left == nullptr || root->right == nullptr) {
            Node* temp = root->left ? root->left : root->right;

            // No child case
            if (temp == nullptr) {
                temp = root;
                root = nullptr;
            } else // One child case
                *root = *temp; // Copy the contents of the non-empty child

            delete temp;
        } else {
            // Node with two children, get the inorder successor
            Node* temp = findMinValueNode(root->right);

            // Copy the inorder successor's data to this node
            root->key = temp->key;

            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->key);
        }
    }

    // If the tree had only one node then return
    if (root == nullptr)
        return root;

    // Update height and balance factor of the current node
    updateHeight(root);

    // Check if the node became unbalanced
    int balance = getBalanceFactor(root);

    // Left Heavy (LL or LR)
    if (balance > 1) {
        if (getBalanceFactor(root->left) >= 0)
            return rightRotate(root); // LL
        else {
            root->left = leftRotate(root->left);
            return rightRotate(root); // LR
        }
    }

    // Right Heavy (RR or RL)
    if (balance < -1) {
        if (getBalanceFactor(root->right) <= 0)
            return leftRotate(root); // RR
        else {
            root->right = rightRotate(root->right);
            return leftRotate(root); // RL
        }
    }

    return root;
}

// Function to print the tree in pre-order
void printPreOrder(Node* root) {
    if (root != nullptr) {
        cout << root->key << " ";
        printPreOrder(root->left);
        printPreOrder(root->right);
    }
}

// Function to print the tree in post-order
void printPostOrder(Node* root) {
    if (root != nullptr) {
        printPostOrder(root->left);
        printPostOrder(root->right);
        cout << root->key << " ";
    }
}

// Function to print the tree in in-order
void printInOrder(Node* root) {
    if (root != nullptr) {
        printInOrder(root->left);
        cout << root->key << " ";
        printInOrder(root->right);
    }
}

bool isEmpty(Node* root) {
    return root == nullptr;
}

// Function to delete the entire AVL tree
void deleteTree(Node* root) {
    if (root == nullptr)
        return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    Node* root = nullptr;

    string input;
    getline(cin, input);

    istringstream iss(input);
    vector<string> words;
    string word;
    string operation;
    while (iss >> word) {
        words.push_back(word);
    }
    
    for (const string& w : words) {
        char firstLetter = w[0];
        int value;

        if(firstLetter == 'A'){
            value = stoi(w.substr(1));
            root = insert(root,value);
        }
        else if (firstLetter == 'D'){
            value = stoi(w.substr(1));
            root = deleteNode(root,value);
        }
        else {
            operation = w;
        }
    }

    if(isEmpty(root)){
        cout <<"EMPTY" << endl;
    }
    else if(operation == "PRE"){
        printPreOrder(root);
    } else if(operation == "IN"){
        printInOrder(root);
    } else if(operation == "POST"){
        printPostOrder(root);
    }
    return 0;
}
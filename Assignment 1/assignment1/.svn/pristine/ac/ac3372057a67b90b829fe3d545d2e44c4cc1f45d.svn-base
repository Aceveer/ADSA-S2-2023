#include <iostream>
#include <string>
#include <math.h>
#include <algorithm>
using namespace std;

string addNumbers(string num1, string num2, int base){
    int l1 = num1.length();
    int l2 = num2.length();
    int maxLength = l1>l2 ? l1 : l2;
    int sum = 0;
    int carry = 0;
    string result = "";
    //Padding 0s
    while(num1.length() < maxLength){
        num1 = "0" + num1;
    }
    while(num2.length() < maxLength){
        num2 = "0" + num2;
    }
    
    reverse(num1.begin(),num1.end());
    reverse(num2.begin(),num2.end());
    
    //Code for addition
    for (int i = 0; i<maxLength;i++){
        int temp1 = int(num1[i]) - 48;
        int temp2 = int(num2[i]) - 48;
        sum = temp1 + temp2 + carry;
        int rem = sum % base;
        result = to_string(rem) + result;
        if(sum >= base){
            sum = sum/base;
            carry = 1;
        }
        else {
            carry = 0;
        }
    }
    if(carry > 0){
        result = to_string(carry) + result;
    }
    return result;
}

string subtractNumbers(string num1, string num2, int base){
    int l1 = num1.length();
    int l2 = num2.length();
    int maxLength = l1>l2 ? l1 : l2;
    while(num1.length() < maxLength){
        num1 = "0" + num1 ;
    }
    while(num2.length() < maxLength){
        num2 = "0" + num2 ;
    }
    int maxNumber = num1.compare(num2);
    //If num1 < num2, then swap.
    if(maxNumber < 0){
        string tempNum = num1;
        num1 = num2;
        num2 = tempNum;
    }
    int diff = 0;
    int borrow = 0;
    string result = "";

    reverse(num1.begin(), num1.end());
    reverse(num2.begin(), num2.end());

    // Code for subtraction
    for (int i = 0; i < maxLength; i++) {
        int temp1 = int(num1[i]) - 48;
        int temp2 = int(num2[i]) - 48;
        diff = temp1 - temp2 - borrow;
        if (diff < 0) {
            diff = diff + base;
            borrow = 1;
        } else {
            borrow = 0;
        }
        result = to_string(diff) + result;
    }
    return result;
}

string karatsubaMultiply(string num1, string num2, int base) {
    int l1 = num1.length();
    int l2 = num2.length();
    int maxLength = l1>l2 ? l1 : l2;

    if(maxLength == 1){
        int temp1 = num1[0] - 48;
        int temp2 = num2[0] - 48;
        int product = temp1 * temp2;
        if(product >= base){
            int quotient = product/base;
            int remainder = product%base;
            string result = to_string(quotient) + to_string(remainder);
            return result;
        }
        return to_string(temp1 * temp2);
    }
    //Padding 0s
    while (num1.length() < maxLength) {
        num1 = "0" + num1;
    }
    while (num2.length() < maxLength) {
        num2 = "0" + num2;
    }
    int k;
    int addingZeroVariable = maxLength/2;
    if(maxLength%2 == 1) {
        k = (maxLength+1)/2;
    } else {
        k = maxLength/2;
    }
    // cout << "------------------------------------------------------------------" << endl;
    // cout << "Num1 : " << num1 << endl;
    // cout << "Num2 : " << num2 << endl;
    // cout << "K: " << k << endl;
    string a1 = num1.substr(0,k);
    string a0 = num1.substr(k);
    string b1 = num2.substr(0,k);
    string b0 = num2.substr(k);
    
    // cout << "a1: " << a1 << endl;
    // cout << "a0: " << a0 << endl;
    // cout << "b1: " << b1 << endl;
    // cout << "b0: " << b0<< endl;

    string p2 = karatsubaMultiply(a1,b1,base);
    string p1 = karatsubaMultiply(addNumbers(a1,a0,base),addNumbers(b1,b0,base),base);
    string p0 = karatsubaMultiply(a0,b0,base);

    string zero2 = "";
    string zero1 = "";
    string zero0 = "";
    for(int i =0; i< addingZeroVariable;i++){
        zero2.insert(0,"00");
        zero1.insert(0,"0");
    
    }
    // cout << "P2: " << p2 << endl;
    // cout << "P1: " << p1 << endl;
    // cout << "P0: " << p0 << endl;
    string term1 = p2 + zero2;
    // cout << "Term1: " << term1 << endl;
    string term2 = subtractNumbers(p1,addNumbers(p2,p0,base),base) + zero1;
    // cout << "Term2: " << term2 << endl;
    string term3 = p0;
    // cout << "Term3: " << term3 << endl;
    string sum1 = addNumbers(term2,term3,base);
    // cout << "Term2 + Term3: " << sum1 << endl;
    string sum2 = addNumbers(term1,sum1,base);
    // cout << "Term 1 + Term2 + Term3: " << sum2 << endl;
    return sum2;
}

string subtractNumbersForDivisionOnly(string num1, string num2, int base){
    int l1 = num1.length();
    int l2 = num2.length();
    int maxLength = l1>l2 ? l1 : l2;
    while(num1.length() < maxLength){
        num1 = "0" + num1 ;
    }
    while(num2.length() < maxLength){
        num2 = "0" + num2 ;
    }
    int diff = 0;
    int borrow = 0;
    string result = "";
    reverse(num1.begin(), num1.end());
    reverse(num2.begin(), num2.end());
    // Code for subtraction
    for (int i = 0; i < maxLength; i++) {
        int temp1 = int(num1[i]) - 48;
        int temp2 = int(num2[i]) - 48;
        diff = temp1 - temp2 - borrow;

        if(i==maxLength-1 && diff < 0){
            return "-1";
        }

        if (diff < 0) {
            diff = diff + base;
            borrow = 1;
        } else {
            borrow = 0;
        }
        result = to_string(diff) + result;
    }
    return result;
}

string divideNumbers(string num1, string num2, int base){
    int l1 = num1.length();
    int l2 = num2.length();
    int maxLength = l1>l2 ? l1 : l2;
    string tempDifference = "";
    string numberOfSubtractions = "0";
    string result = "";
    //Padding 0s
    while(num1.length() < maxLength){
        num1 = "0" + num1;
    }
    while(num2.length() < maxLength){
        num2 = "0" + num2;
    }

    while(num1.compare(num2) == 0 || num1.compare(num2)){
        tempDifference = subtractNumbersForDivisionOnly(num1,num2,base);
        num1 = tempDifference;
        if(num1 == "-1"){
            break;
        }
       numberOfSubtractions = addNumbers(numberOfSubtractions, "1",base); //Convert to String Addition
    }
    return numberOfSubtractions;
}


int main() {
    string num1, num2;
    int base;
    cin >> num1 >> num2 >> base;
    // string sum = addNumbers(num1, num2, base);
    // string prod = karatsubaMultiply(num1, num2, base);
    // //Removing preceeding 0s
    // prod.erase(0, min(prod.find_first_not_of('0'), prod.size() - 1));
    // string divide = divideNumbers(num1, num2, base);
    // cout << sum << " " << prod << " " << divide << endl;
    return 0;
}
